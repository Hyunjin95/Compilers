running ./test/parser/array06.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array06'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *Test() --> <NULL>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-         ]]
-       statement list:
-         call [ *Test() --> <NULL> ] <NULL>
-       nested scopes:
-         CAstScope: 'Print'
-           symbol table:
-             [[
-               [ %A        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-                   [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                 call [ *WriteLn() --> <NULL> ] <NULL>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Init'
-           symbol table:
-             [[
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ %a        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $c        <int>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $c        <int> ] <int>
-               0 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 := <int>
-                   [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   [ $c        <int> ] <int>
-                 := <int>
-                   [ $c        <int> ] <int>
-                   add <int>
-                     [ $c        <int> ] <int>
-                     1 <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-             call [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Test'
-           symbol table:
-             [[
-               [ $x        <array 3  of <array 3  of <int>>>               ]
-             ]]
-           statement list:
-             call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-               11111111 <int>
-             call [ *WriteLn() --> <NULL> ] <NULL>
-             call [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               &() <ptr(4) to <array 3  of <array 3  of <int>>>>
-                 [ $x        <array 3  of <array 3  of <int>>> ] <array 3  of <array 3  of <int>>>
-             call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-               22222222 <int>
-             call [ *WriteLn() --> <NULL> ] <NULL>
-             call [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               &() <ptr(4) to <array 3  of <array 3  of <int>>>>
-                 [ $x        <array 3  of <array 3  of <int>>> ] <array 3  of <array 3  of <int>>>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array06.mod.ast.pdf ./test/parser/array06.mod.ast.dot
- 
- 
- Done.
running ./test/parser/char01.mod
diff reference and yours
- successfully parsed.
-   AST:
-     CAstScope: 'char01'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @c        <char>           ]
-         ]]
-       statement list:
-         := <char>
-           [ @c        <char> ] <char>
-           49 <char>
-         := <char>
-           [ @c        <char> ] <char>
-           9 <char>
-         call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-           [ @c        <char> ] <char>
-         call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-           33 <char>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/char01.mod.ast.pdf ./test/parser/char01.mod.ast.dot
- 
- 
- Done.
running ./test/parser/array.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @a        <array 5  of <array 5  of <int>>>           ]
-           [ *add(<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>) --> <NULL>           ]
-           [ *addB(<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>) --> <NULL>           ]
-           [ @b        <array 5  of <array 5  of <int>>>           ]
-           [ @c        <array 5  of <array 5  of <int>>>           ]
-         ]]
-       statement list:
-         call [ *add(<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>,<ptr(4) to <array 5  of <array 5  of <int>>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-             [ @a        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-           &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-             [ @b        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-           &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-             [ @c        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-       nested scopes:
-         CAstScope: 'add'
-           symbol table:
-             [[
-               [ %A        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ %B        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ %C        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 5 <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   5 <int>
-               while-body
-                 := <int>
-                   [ %C        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   add <int>
-                     [ %A        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-                     [ %B        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'addB'
-           symbol table:
-             [[
-               [ %A        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ %B        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ %C        <ptr(4) to <array 5  of <array 5  of <int>>>>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 5 <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   5 <int>
-               while-body
-                 := <int>
-                   [ %C        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   add <int>
-                     [ %A        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-                     [ %B        <ptr(4) to <array 5  of <array 5  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array.mod.ast.pdf ./test/parser/array.mod.ast.dot
- 
- 
- Done.
running ./test/parser/array07.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array07'
-       symbol table:
-         [[
-           [ *Add(<ptr(4) to <array  of <array  of <int>>>>,<ptr(4) to <array  of <array  of <int>>>>,<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *Test() --> <NULL>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @sum      <array 5  of <array 5  of <int>>>           ]
-         ]]
-       statement list:
-         call [ *Test() --> <NULL> ] <NULL>
-         call [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-             [ @sum      <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-       nested scopes:
-         CAstScope: 'Print'
-           symbol table:
-             [[
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ %a        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-                   [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Init'
-           symbol table:
-             [[
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ %a        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $c        <int>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $c        <int> ] <int>
-               0 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 := <int>
-                   [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   [ $c        <int> ] <int>
-                 := <int>
-                   [ $c        <int> ] <int>
-                   add <int>
-                     [ $c        <int> ] <int>
-                     1 <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Add'
-           symbol table:
-             [[
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ $c        <int>               ]
-               [ %d        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-               [ %s1       <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ %s2       <ptr(4) to <array  of <array  of <int>>>>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %d        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %d        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $c        <int> ] <int>
-               0 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 := <int>
-                   [ %d        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   add <int>
-                     [ %s1       <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-                     [ %s2       <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                       [ $i        <int> ] <int>
-                       [ $j        <int> ] <int>
-                 := <int>
-                   [ $c        <int> ] <int>
-                   add <int>
-                     [ $c        <int> ] <int>
-                     1 <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Test'
-           symbol table:
-             [[
-               [ $a        <array 5  of <array 5  of <int>>>               ]
-               [ $b        <array 5  of <array 5  of <int>>>               ]
-               [ $c        <array 5  of <int>>               ]
-             ]]
-           statement list:
-             call [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-                 [ $a        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-             call [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-                 [ $b        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-             call [ *Add(<ptr(4) to <array  of <array  of <int>>>>,<ptr(4) to <array  of <array  of <int>>>>,<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-                 [ $a        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-               &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-                 [ $b        <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-               &() <ptr(4) to <array 5  of <array 5  of <int>>>>
-                 [ @sum      <array 5  of <array 5  of <int>>> ] <array 5  of <array 5  of <int>>>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array07.mod.ast.pdf ./test/parser/array07.mod.ast.dot
- 
- 
- Done.
running ./test/parser/char03.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'char03'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *PrintInt(<int>) --> <NULL>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @i        <int>           ]
-         ]]
-       statement list:
-         := <int>
-           [ @i        <int> ] <int>
-           1 <int>
-         while cond
-           # <bool>
-             [ @i        <int> ] <int>
-             0 <int>
-         while-body
-           := <int>
-             [ @i        <int> ] <int>
-             call [ *ReadInt() --> <int> ] <int>
-           call [ *PrintInt(<int>) --> <NULL> ] <NULL>
-             [ @i        <int> ] <int>
-           call [ *WriteLn() --> <NULL> ] <NULL>
-       nested scopes:
-         CAstScope: 'PrintInt'
-           symbol table:
-             [[
-               [ $r        <int>               ]
-               [ %v        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $r        <int> ] <int>
-               sub <int>
-                 [ %v        <int> ] <int>
-                 mul <int>
-                   div <int>
-                     [ %v        <int> ] <int>
-                     10 <int>
-                   10 <int>
-             := <int>
-               [ %v        <int> ] <int>
-               div <int>
-                 [ %v        <int> ] <int>
-                 10 <int>
-             if cond
-               > <bool>
-                 [ %v        <int> ] <int>
-                 0 <int>
-             if-body
-               call [ *PrintInt(<int>) --> <NULL> ] <NULL>
-                 [ %v        <int> ] <int>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 0 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 48 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 1 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 49 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 2 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 50 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 3 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 51 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 4 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 52 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 5 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 53 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 6 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 54 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 7 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 55 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 8 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 56 <char>
-             else-body
-               empty.
-             if cond
-               = <bool>
-                 [ $r        <int> ] <int>
-                 9 <int>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 57 <char>
-             else-body
-               empty.
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/char03.mod.ast.pdf ./test/parser/char03.mod.ast.dot
- 
- 
- Done.
running ./test/parser/test05.mod
diff reference and yours
+ test_parser: src/ast.cpp:863: CAstUnaryOp::CAstUnaryOp(CToken, EOperation, CAstExpression*): Assertion `(oper == opNeg) || (oper == opPos) || (oper == opNot)' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'test05'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @max      <int>           ]
-           [ @min      <int>           ]
-         ]]
-       statement list:
-         := <int>
-           [ @min      <int> ] <int>
-           -2147483648 <int>
-         := <int>
-           [ @max      <int> ] <int>
-           2147483647 <int>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/test05.mod.ast.pdf ./test/parser/test05.mod.ast.dot
- 
- 
- Done.
running ./test/parser/char04.mod
diff reference and yours
- parse error : at 18:1 : statement expected.
- 
- 
- Done.
running ./test/parser/string02.mod
diff reference and yours
+ got 10:48: tRBrak
+ parse error : at 10:48 : factor expected.
- successfully parsed.
-   AST:
-     CAstScope: 'string02'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @_str_1   <array 17  of <char>>           ]
-             [ data: 'Enter your age: ' ]
-           [ @_str_2   <array 17  of <char>>           ]
-             [ data: 'Enter the year: ' ]
-           [ @_str_3   <array 39  of <char>>           ]
-             [ data: 'You will be 100 years old in the year ' ]
-           [ @_str_4   <array 3  of <char>>           ]
-             [ data: '.\n' ]
-           [ @age      <int>           ]
-           [ @year     <int>           ]
-         ]]
-       statement list:
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 17  of <char>>>
-             "Enter your age: " <array 17  of <char>>
-         := <int>
-           [ @age      <int> ] <int>
-           call [ *ReadInt() --> <int> ] <int>
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 17  of <char>>>
-             "Enter the year: " <array 17  of <char>>
-         := <int>
-           [ @year     <int> ] <int>
-           call [ *ReadInt() --> <int> ] <int>
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 39  of <char>>>
-             "You will be 100 years old in the year " <array 39  of <char>>
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           sub <int>
-             add <int>
-               [ @year     <int> ] <int>
-               100 <int>
-             [ @age      <int> ] <int>
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 3  of <char>>>
-             ".\n" <array 3  of <char>>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/string02.mod.ast.pdf ./test/parser/string02.mod.ast.dot
running ./test/parser/test06.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'test06'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @a        <int>           ]
-           [ @b        <int>           ]
-           [ @b0       <bool>           ]
-           [ @b1       <bool>           ]
-           [ *binop(<int>,<int>) --> <bool>           ]
-           [ @c        <int>           ]
-           [ *compare(<int>,<int>) --> <bool>           ]
-           [ *foo(<int>) --> <NULL>           ]
-           [ *intop(<int>,<int>) --> <int>           ]
-           [ *unary() --> <NULL>           ]
-         ]]
-       statement list:
-         empty.
-       nested scopes:
-         CAstScope: 'foo'
-           symbol table:
-             [[
-               [ %a        <int>               ]
-               [ $b        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $b        <int> ] <int>
-               [ @c        <int> ] <int>
-             := <int>
-               [ @c        <int> ] <int>
-               add <int>
-                 [ %a        <int> ] <int>
-                 [ $b        <int> ] <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'unary'
-           symbol table:
-             [[
-             ]]
-           statement list:
-             := <int>
-               [ @a        <int> ] <int>
-               neg <int>
-                 [ @b        <int> ] <int>
-             := <bool>
-               [ @b0       <bool> ] <bool>
-               not <bool>
-                 [ @b1       <bool> ] <bool>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'binop'
-           symbol table:
-             [[
-               [ %p0       <int>               ]
-               [ %p1       <int>               ]
-             ]]
-           statement list:
-             return <INVALID>
-               not <INVALID>
-                 or <INVALID>
-                   > <bool>
-                     add <int>
-                       neg <int>
-                         [ %p0       <int> ] <int>
-                       [ %p1       <int> ] <int>
-                     0 <int>
-                   and <INVALID>
-                     > <bool>
-                       [ %p0       <int> ] <int>
-                       0 <int>
-                     < <bool>
-                       [ %p1       <int> ] <int>
-                       0 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'intop'
-           symbol table:
-             [[
-               [ %p0       <int>               ]
-               [ %p1       <int>               ]
-             ]]
-           statement list:
-             return <int>
-               add <int>
-                 neg <int>
-                   [ %p0       <int> ] <int>
-                 pos <int>
-                   [ %p1       <int> ] <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'compare'
-           symbol table:
-             [[
-               [ %a        <int>               ]
-               [ %b        <int>               ]
-             ]]
-           statement list:
-             if cond
-               and <INVALID>
-                 and <INVALID>
-                   call [ *binop(<int>,<int>) --> <bool> ] <bool>
-                     [ %a        <int> ] <int>
-                     [ %b        <int> ] <int>
-                   < <bool>
-                     call [ *intop(<int>,<int>) --> <int> ] <int>
-                       [ %b        <int> ] <int>
-                       [ %a        <int> ] <int>
-                     [ %a        <int> ] <int>
-                 # <bool>
-                   [ %a        <int> ] <int>
-                   [ %b        <int> ] <int>
-             if-body
-               return <bool>
-                 true <bool>
-             else-body
-               return <bool>
-                 false <bool>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/test06.mod.ast.pdf ./test/parser/test06.mod.ast.dot
- 
- 
- Done.
running ./test/parser/string01.mod
diff reference and yours
- successfully parsed.
-   AST:
-     CAstScope: 'string01'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @_str_1   <array 14  of <char>>           ]
-             [ data: 'Hello, world\n' ]
-           [ @_str_2   <array 23  of <char>>           ]
-             [ data: 'This is pretty nice!\n\n' ]
-         ]]
-       statement list:
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 14  of <char>>>
-             "Hello, world\n" <array 14  of <char>>
-         call [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 23  of <char>>>
-             "This is pretty nice!\n\n" <array 23  of <char>>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/string01.mod.ast.pdf ./test/parser/string01.mod.ast.dot
- 
- 
- Done.
running ./test/parser/array04.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array04'
-       symbol table:
-         [[
-           [ @A        <array 3  of <array 3  of <int>>>           ]
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *Set(<ptr(4) to <array  of <array  of <int>>>>,<int>) --> <NULL>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @i        <int>           ]
-           [ *print() --> <NULL>           ]
-         ]]
-       statement list:
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           11111111 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *print() --> <NULL> ] <NULL>
-         := <int>
-           [ @A        <array 3  of <array 3  of <int>>> ] <int>
-             0 <int>
-             0 <int>
-           2 <int>
-         := <int>
-           [ @i        <int> ] <int>
-           [ @A        <array 3  of <array 3  of <int>>> ] <int>
-             0 <int>
-             0 <int>
-         call [ *Set(<ptr(4) to <array  of <array  of <int>>>>,<int>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 3  of <array 3  of <int>>>>
-             [ @A        <array 3  of <array 3  of <int>>> ] <array 3  of <array 3  of <int>>>
-           [ @i        <int> ] <int>
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           22222222 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *print() --> <NULL> ] <NULL>
-       nested scopes:
-         CAstScope: 'Set'
-           symbol table:
-             [[
-               [ %P        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ %v        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ %P        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                 [ %v        <int> ] <int>
-                 [ %v        <int> ] <int>
-               1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'print'
-           symbol table:
-             [[
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 3 <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   3 <int>
-               while-body
-                 call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-                   [ @A        <array 3  of <array 3  of <int>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-             call [ *WriteLn() --> <NULL> ] <NULL>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array04.mod.ast.pdf ./test/parser/array04.mod.ast.dot
- 
- 
- Done.
running ./test/parser/mytest1.mod
diff reference and yours
all same
running ./test/parser/array01.mod
diff reference and yours
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
+           [ *DIM(<ptr(4) to <array  of <NULL>>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
+           [ *DOFS(<ptr(4) to <array  of <NULL>>>) --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
+           [ *WriteChar() --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
+           [ *WriteInt(<int>,<char>) --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
+           [ *WriteStr(<array  of <char>>) --> <NULL>           ]
-         := <int>
+         := <INVALID>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
+           [ @A        <array 5  of <array 5  of <int>>> ] <INVALID>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
+           [ @A        <array 5  of <array 5  of <int>>> ] <INVALID>
running ./test/parser/test03.mod
diff reference and yours
- parse error : at 22:5 : procedure/function identifier mismatch ('foo' != 'foox').
+ parse error : at 20:14 : expected 'tIdent', got 'tRBrak'
running ./test/parser/char02.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'char02'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @c        <char>           ]
-           [ *compare(<char>) --> <NULL>           ]
-         ]]
-       statement list:
-         := <char>
-           [ @c        <char> ] <char>
-           49 <char>
-         call [ *compare(<char>) --> <NULL> ] <NULL>
-           [ @c        <char> ] <char>
-         call [ *compare(<char>) --> <NULL> ] <NULL>
-           97 <char>
-         call [ *compare(<char>) --> <NULL> ] <NULL>
-           49 <char>
-         call [ *compare(<char>) --> <NULL> ] <NULL>
-           0 <char>
-       nested scopes:
-         CAstScope: 'compare'
-           symbol table:
-             [[
-               [ %c        <char>               ]
-             ]]
-           statement list:
-             if cond
-               >= <bool>
-                 [ %c        <char> ] <char>
-                 49 <char>
-             if-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 49 <char>
-             else-body
-               call [ *WriteChar(<char>) --> <NULL> ] <NULL>
-                 48 <char>
-             call [ *WriteLn() --> <NULL> ] <NULL>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/char02.mod.ast.pdf ./test/parser/char02.mod.ast.dot
- 
- 
- Done.
running ./test/parser/test04.mod
diff reference and yours
- successfully parsed.
-   AST:
-     CAstScope: 'test04'
-       symbol table:
-         [[
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @a        <int>           ]
-           [ @b        <int>           ]
-           [ @c        <int>           ]
-         ]]
-       statement list:
-         := <int>
-           [ @a        <int> ] <int>
-           1 <int>
-         := <int>
-           [ @b        <int> ] <int>
-           2 <int>
-         := <int>
-           [ @c        <int> ] <int>
-           3 <int>
-         := <int>
-           [ @a        <int> ] <int>
-           add <int>
-             add <int>
-               [ @a        <int> ] <int>
-               [ @b        <int> ] <int>
-             [ @c        <int> ] <int>
-         := <int>
-           [ @b        <int> ] <int>
-           sub <int>
-             sub <int>
-               [ @a        <int> ] <int>
-               [ @b        <int> ] <int>
-             [ @c        <int> ] <int>
-         := <int>
-           [ @c        <int> ] <int>
-           add <int>
-             [ @a        <int> ] <int>
-             mul <int>
-               [ @b        <int> ] <int>
-               [ @c        <int> ] <int>
-         := <int>
-           [ @a        <int> ] <int>
-           neg <int>
-             [ @a        <int> ] <int>
-         := <int>
-           [ @b        <int> ] <int>
-           div <int>
-             add <int>
-               [ @a        <int> ] <int>
-               [ @b        <int> ] <int>
-             [ @c        <int> ] <int>
-         := <int>
-           [ @c        <int> ] <int>
-           neg <int>
-             add <int>
-               -1 <int>
-               [ @a        <int> ] <int>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/test04.mod.ast.pdf ./test/parser/test04.mod.ast.dot
- 
- 
- Done.
running ./test/parser/array05.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array05'
-       symbol table:
-         [[
-           [ @A        <array 3  of <array 3  of <int>>>           ]
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *Set(<ptr(4) to <array  of <array  of <int>>>>,<int>) --> <NULL>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @i        <int>           ]
-         ]]
-       statement list:
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           11111111 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 3  of <array 3  of <int>>>>
-             [ @A        <array 3  of <array 3  of <int>>> ] <array 3  of <array 3  of <int>>>
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           22222222 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *Init(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 3  of <array 3  of <int>>>>
-             [ @A        <array 3  of <array 3  of <int>>> ] <array 3  of <array 3  of <int>>>
-       nested scopes:
-         CAstScope: 'Set'
-           symbol table:
-             [[
-               [ %P        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ %v        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ %P        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                 [ %v        <int> ] <int>
-                 [ %v        <int> ] <int>
-               1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Print'
-           symbol table:
-             [[
-               [ %A        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-                   [ %A        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                 call [ *WriteLn() --> <NULL> ] <NULL>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'Init'
-           symbol table:
-             [[
-               [ $M        <int>               ]
-               [ $N        <int>               ]
-               [ %a        <ptr(4) to <array  of <array  of <int>>>>               ]
-               [ $c        <int>               ]
-               [ $i        <int>               ]
-               [ $j        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $N        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 1 <int>
-             := <int>
-               [ $M        <int> ] <int>
-               call [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int> ] <int>
-                 [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-                 2 <int>
-             := <int>
-               [ $c        <int> ] <int>
-               0 <int>
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 [ $N        <int> ] <int>
-             while-body
-               := <int>
-                 [ $j        <int> ] <int>
-                 0 <int>
-               while cond
-                 < <bool>
-                   [ $j        <int> ] <int>
-                   [ $M        <int> ] <int>
-               while-body
-                 := <int>
-                   [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <int>
-                     [ $i        <int> ] <int>
-                     [ $j        <int> ] <int>
-                   [ $c        <int> ] <int>
-                 := <int>
-                   [ $c        <int> ] <int>
-                   add <int>
-                     [ $c        <int> ] <int>
-                     1 <int>
-                 := <int>
-                   [ $j        <int> ] <int>
-                   add <int>
-                     [ $j        <int> ] <int>
-                     1 <int>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-             call [ *Print(<ptr(4) to <array  of <array  of <int>>>>) --> <NULL> ] <NULL>
-               [ %a        <ptr(4) to <array  of <array  of <int>>>> ] <ptr(4) to <array  of <array  of <int>>>>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array05.mod.ast.pdf ./test/parser/array05.mod.ast.dot
- 
- 
- Done.
running ./test/parser/array02.mod
diff reference and yours
+ got 12:22: tRBrak
+ parse error : at 12:22 : factor expected.
- successfully parsed.
-   AST:
-     CAstScope: 'array02'
-       symbol table:
-         [[
-           [ @A        <array 5  of <array 5  of <int>>>           ]
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-         ]]
-       statement list:
-         := <int>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
-             2 <int>
-             3 <int>
-           call [ *ReadInt() --> <int> ] <int>
-         := <int>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
-             0 <int>
-             1 <int>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
-             2 <int>
-             3 <int>
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           [ @A        <array 5  of <array 5  of <int>>> ] <int>
-             0 <int>
-             1 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-       nested scopes:
-         empty.
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array02.mod.ast.pdf ./test/parser/array02.mod.ast.dot
running ./test/parser/array03.mod
diff reference and yours
+ test_parser: src/symtab.cpp:49: CSymbol::CSymbol(std::string, ESymbolType, const CType*): Assertion `_datatype != __null' failed.
- successfully parsed.
-   AST:
-     CAstScope: 'array03'
-       symbol table:
-         [[
-           [ @A        <array 5  of <int>>           ]
-           [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
-           [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
-           [ *ReadInt() --> <int>           ]
-           [ *Set(<ptr(4) to <array  of <int>>>,<int>) --> <NULL>           ]
-           [ *WriteChar(<char>) --> <NULL>           ]
-           [ *WriteInt(<int>) --> <NULL>           ]
-           [ *WriteLn() --> <NULL>           ]
-           [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
-           [ @i        <int>           ]
-           [ *print() --> <NULL>           ]
-         ]]
-       statement list:
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           11111111 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *print() --> <NULL> ] <NULL>
-         := <int>
-           [ @A        <array 5  of <int>> ] <int>
-             2 <int>
-           3 <int>
-         := <int>
-           [ @i        <int> ] <int>
-           [ @A        <array 5  of <int>> ] <int>
-             2 <int>
-         call [ *Set(<ptr(4) to <array  of <int>>>,<int>) --> <NULL> ] <NULL>
-           &() <ptr(4) to <array 5  of <int>>>
-             [ @A        <array 5  of <int>> ] <array 5  of <int>>
-           [ @i        <int> ] <int>
-         call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-           22222222 <int>
-         call [ *WriteLn() --> <NULL> ] <NULL>
-         call [ *print() --> <NULL> ] <NULL>
-       nested scopes:
-         CAstScope: 'Set'
-           symbol table:
-             [[
-               [ %P        <ptr(4) to <array  of <int>>>               ]
-               [ %v        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ %P        <ptr(4) to <array  of <int>>> ] <int>
-                 [ %v        <int> ] <int>
-               1 <int>
-           nested scopes:
-             empty.
-         
-         CAstScope: 'print'
-           symbol table:
-             [[
-               [ $i        <int>               ]
-             ]]
-           statement list:
-             := <int>
-               [ $i        <int> ] <int>
-               0 <int>
-             while cond
-               < <bool>
-                 [ $i        <int> ] <int>
-                 5 <int>
-             while-body
-               call [ *WriteInt(<int>) --> <NULL> ] <NULL>
-                 [ @A        <array 5  of <int>> ] <int>
-                   [ $i        <int> ] <int>
-               call [ *WriteLn() --> <NULL> ] <NULL>
-               := <int>
-                 [ $i        <int> ] <int>
-                 add <int>
-                   [ $i        <int> ] <int>
-                   1 <int>
-           nested scopes:
-             empty.
-         
-     
- 
- 
- run the following command to convert the .dot file into a PDF:
-   dot -Tpdf -o./test/parser/array03.mod.ast.pdf ./test/parser/array03.mod.ast.dot
- 
- 
- Done.
running ./test/parser/SnuPL-1/test02.mod
diff reference and yours
all same
running ./test/parser/SnuPL-1/test05.mod
diff reference and yours
all same
running ./test/parser/SnuPL-1/test01.mod
diff reference and yours
all same
running ./test/parser/SnuPL-1/test03.mod
diff reference and yours
all same
running ./test/parser/SnuPL-1/test04.mod
diff reference and yours
all same
running ./test/scanner/test02.mod
diff reference and yours
all same
running ./test/scanner/test01.mod
diff reference and yours
all same
running ./test/scanner/SnuPL-1/test02.mod
diff reference and yours
all same
running ./test/scanner/SnuPL-1/test01.mod
diff reference and yours
all same
running ./test/scanner/SnuPL-1/test03.mod
diff reference and yours
all same

score 11 / 29
